{"version":3,"sources":["components/post/post.ts"],"names":["Post","Post.constructor","Post.postContent"],"mappings":";;;;;;;;;AAAA,8BAA4B,8BAA8B,CAAC,CAAA;AAM3D,+BAA6B,+BAA+B,CAAC,CAAA;AAC7D,qBAAwB,eAAe,CAAC,CAAA;AACxC,uBAA0B,iBAAiB,CAAC,CAAA;AAC5C,uBAA8B,iBAAiB,CAAC,CAAA;AAChD,uBAA8B,iBAAiB,CAAC,CAAA;AAChD,uBAAoB,iBAAiB,CAAC,CAAA;AACtC,uBAAmB,iBAAiB,CAAC,CAAA;AAGrC;IAkBIA,cAAYA,UAAwBA,EAAEA,WAA0BA,EAAEA,WAAwBA;QAR1FC,UAAKA,GAAqBA,EAAEA,CAACA;QAI7BA,gBAAWA,GAAkBA,CAACA,cAAcA,EAAEA,QAAQA,EAAEA,cAAcA,EAAEA,WAAWA,EAAEA,UAAUA,CAACA,CAACA;QACjGA,oBAAeA,GAAkBA,CAACA,IAAIA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,KAAKA,CAACA,CAACA;QAChGA,mBAAcA,GAAkBA,CAACA,MAAMA,EAAEA,OAAOA,EAAEA,YAAYA,EAAEA,UAAUA,EAAEA,YAAYA,EAAEA,OAAOA,CAACA,CAACA;QAG/FA,IAAIA,CAACA,WAAWA,GAAGA,WAAWA,CAACA;QAC/BA,IAAIA,CAACA,QAAQA,GAAGA,WAAWA,CAACA,KAAKA,CAACA;YAC9BA,UAAUA,EAAEA,CAACA,EAAEA,CAACA;YAChBA,mBAAmBA,EAAEA,CAACA,EAAEA,CAACA;YACzBA,eAAeA,EAAEA,CAACA,EAAEA,CAACA;YACrBA,YAAYA,EAAEA,CAACA,EAAEA,CAACA;YAClBA,cAAcA,EAAEA,CAACA,EAAEA,CAACA;YACpBA,eAAeA,EAAEA,CAACA,EAAEA,CAACA;YACrBA,cAAcA,EAAEA,CAACA,EAAEA,CAACA;YACpBA,aAAaA,EAAEA,CAACA,EAAEA,CAACA;YACnBA,kBAAkBA,EAAEA,CAACA,EAAEA,CAACA;SAC3BA,CAACA,CAACA;QAEHA,OAAOA,CAACA,GAAGA,CAACA,UAAUA,CAACA,GAAGA,CAACA,+BAA+BA,CAACA,CAACA,CAACA;IA6BjEA,CAACA;IAEDD,0BAAWA,GAAXA,UAAYA,IAAQA;QAChBE,IAAIA,CAACA,WAAWA,CAACA,WAAWA,CAACA,IAAIA,CAACA,CAACA;IACvCA,CAACA;IAjELF;QAACA,gBAASA,CAACA;YACPA,QAAQA,EAAEA,MAAMA;YAChBA,SAASA,EAACA,CAACA,6BAAaA,EAAEA,+BAAcA,CAACA;YACzCA,YAAYA,EAAEA,CAACA,oBAAWA,CAACA;YAC3BA,WAAWA,EAAEA,6BAA6BA;YAC1CA,UAAUA,EAAEA,CAACA,wBAAeA,EAAEA,wBAAeA,EAAEA,cAAKA,EAAEA,aAAIA,CAACA;SAC9DA,CAACA;;aA4DDA;IAADA,WAACA;AAADA,CAlEA,AAkECA,IAAA;AA1DY,YAAI,OA0DhB,CAAA","file":"components/post/post.js","sourcesContent":["import {APIGetService} from '../../services/apigetservice';\nimport {PostQuery} from \"../../models/postquery\";\nimport {Player} from \"../../models/player\";\nimport {Query} from \"../../models/query\";\nimport {GameType} from \"../../models/gametype\";\nimport {CharacterType} from \"../../models/charactertype\";\nimport {APIPostService} from \"../../services/apipostservice\";\nimport {Component} from \"angular2/core\";\nimport {FormBuilder} from \"angular2/common\";\nimport {CORE_DIRECTIVES} from \"angular2/common\";\nimport {FORM_DIRECTIVES} from \"angular2/common\";\nimport {NgFor} from \"angular2/common\";\nimport {NgIf} from \"angular2/common\";\nimport {ControlGroup} from \"angular2/common\";\n\n@Component({\n    selector: 'post',\n    providers:[APIGetService, APIPostService],\n    viewBindings: [FormBuilder],\n    templateUrl: './components/post/post.html',\n    directives: [CORE_DIRECTIVES, FORM_DIRECTIVES, NgFor, NgIf]\n})\n\nexport class Post {\n    items: Array<string>;\n    posts: Array<PostQuery> = [];\n    postService: APIPostService;\n    postForm: ControlGroup;\n    response: any;\n    playerTypes: Array<string> = ['Demon Hunter', 'Wizard', 'Witch Doctor', 'Barbarian', 'Crusader'];\n    queryGameLevels: Array<string> = ['0+', '10+', '20+', '30+', '40+', '50+', '60+', '70+', '80+'];\n    queryGameTypes: Array<string> = ['Rift', 'Grift', 'PowerGrift', 'Bounties', 'Keywardens', 'Ubers'];\n\n    constructor(getService:APIGetService, postService:APIPostService, formBuilder: FormBuilder) {\n        this.postService = postService;\n        this.postForm = formBuilder.group({\n            playerType: [''],\n            playerParagonPoints: [''],\n            playerBattleTag: [''],\n            playerRegion: [''],\n            playerGameType: [''],\n            queryMinParagon: [''],\n            queryGameLevel: [''],\n            queryGameType: [''],\n            queryCharacterType: ['']\n        });\n\n        console.log(getService.get('http://riftrun.local/v1/posts'));\n\n    //    getService.get('http://riftrun.local/v1/posts')\n    //              .map((posts: any) => {\n    //                  let result:Array<PostQuery> = [];\n    //                  let characterTypes:Array<CharacterType> = [];\n    //                  posts._embedded.items.forEach((post) => {\n    //                      characterTypes.push(post.query.characterType.concat());\n    //                      result.push(new PostQuery(\n    //                          new Player(\n    //                              post.player.id,\n    //                              post.player.type,\n    //                              post.player.paragonPoints,\n    //                              post.player.battleTag,\n    //                              post.player.region,\n    //                              post.player.seasonal,\n    //                              post.player.gametype\n    //                          ),\n    //                          new Query(\n    //                              post.query.id,\n    //                              post.query.minParagon,\n    //                              new GameType(post.query.game.level, post.query.game.type),\n    //                              characterTypes\n    //                          )\n    //                      ));\n    //                  });\n    //                  return result;\n    //              })\n    //              .subscribe(response => this.posts = response);\n    }\n\n    postContent(item:any) {\n        this.postService.postContent(item);\n    }\n}\n"],"sourceRoot":"/source/"}