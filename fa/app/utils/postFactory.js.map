{"version":3,"sources":["utils/postFactory.ts"],"names":[],"mappings":"AAAA,iDAAiD;AACjD,yEAAyE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAezE;gBAAA;gBA2BA,CAAC;gBAzBG,gCAAU,GAAV,UAAY,KAAK;oBACb,IAAI,MAAM,GAAoB,EAAE,CAAC;oBACjC,IAAI,cAAc,GAAwB,EAAE,CAAC;oBAC7C,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;wBAC/B,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC;wBACvD,MAAM,CAAC,IAAI,CAAC,IAAI,qBAAS,CACrB,IAAI,eAAM,CACN,IAAI,CAAC,MAAM,CAAC,EAAE,EACd,IAAI,CAAC,MAAM,CAAC,IAAI,EAChB,IAAI,CAAC,MAAM,CAAC,aAAa,EACzB,IAAI,CAAC,MAAM,CAAC,SAAS,EACrB,IAAI,CAAC,MAAM,CAAC,MAAM,EAClB,IAAI,CAAC,MAAM,CAAC,QAAQ,EACpB,IAAI,CAAC,MAAM,CAAC,QAAQ,CACvB,EACD,IAAI,aAAK,CACL,IAAI,CAAC,KAAK,CAAC,EAAE,EACb,IAAI,CAAC,KAAK,CAAC,UAAU,EACrB,IAAI,mBAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EACzD,cAAc,CACjB,CACJ,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;oBACH,MAAM,CAAC,MAAM,CAAC;gBAClB,CAAC;gBA/BL;oBAAC,gBAAS,CAAC;wBACP,UAAU,EAAE,CAAC,wBAAe,CAAC;qBAChC,CAAC;oBAED,iBAAU,EAAE;;+BAAA;gBA4Bb,kBAAC;YAAD,CA3BA,AA2BC,IAAA;YA3BD,qCA2BC,CAAA","file":"utils/postFactory.js","sourcesContent":["///<reference path=\"../../typings/browser.d.ts\"/>\n///<reference path=\"../../typings/browser/ambient/es6-shim/index.d.ts\" />\n\nimport {PostQuery} from '../models/postquery';\nimport {Player} from '../models/player';\nimport {Query} from '../models/query';\nimport {GameType} from '../models/gametype';\nimport {CharacterType} from '../models/charactertype';\nimport {Component, Injectable} from '@angular/core';\nimport {CORE_DIRECTIVES} from \"@angular/common\";\n\n@Component({\n    directives: [CORE_DIRECTIVES]\n})\n\n@Injectable()\nexport class PostFactory {\n\n    buildPosts (posts):Array<PostQuery> {\n        let result:Array<PostQuery> = [];\n        let characterTypes:Array<CharacterType> = [];\n        posts._embedded.items.forEach((post) => {\n            characterTypes.push(post.query.characterType.concat());\n            result.push(new PostQuery(\n                new Player(\n                    post.player.id,\n                    post.player.type,\n                    post.player.paragonPoints,\n                    post.player.battleTag,\n                    post.player.region,\n                    post.player.seasonal,\n                    post.player.gametype\n                ),\n                new Query(\n                    post.query.id,\n                    post.query.minParagon,\n                    new GameType(post.query.game.level, post.query.game.type),\n                    characterTypes\n                )\n            ));\n        });\n        return result;\n    }\n}"],"sourceRoot":"/source/"}